/* This file was auto-generated by Galogen */
#ifndef _GALOGEN_HEADER_
#define _GALOGEN_HEADER_
#if defined(__gl_h_) || defined(__GL_H__) || defined(__glext_h_) || defined(__GLEXT_H_) || defined(__gltypes_h_) || defined(__glcorearb_h_) || defined(__gl_glcorearb_h)
#error Galogen-generated header included after a GL header.
#endif

#define __gl_h_ 1
#define __gl32_h_ 1
#define __gl31_h_ 1
#define __GL_H__ 1
#define __glext_h_ 1
#define __GLEXT_H_ 1
#define __gltypes_h_ 1
#define __glcorearb_h_ 1
#define __gl_glcorearb_h_ 1

#if defined(_WIN32)
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#define GL_APIENTRY APIENTRY
#else
#define GL_APIENTRY
#endif

#if defined(__cplusplus)
extern "C" {
#endif

#define GALOGEN_API_NAME "gles2"
#define GALOGEN_API_PROFILE "core"
#define GALOGEN_API_VER_MAJ 2
#define GALOGEN_API_VER_MIN 0
typedef unsigned int  GLenum;
typedef unsigned int  GLuint;
typedef int  GLsizei;
typedef char  GLchar;
#include <KHR/khrplatform.h>
typedef khronos_intptr_t  GLintptr;
typedef khronos_ssize_t  GLsizeiptr;
typedef khronos_float_t  GLfloat;
typedef unsigned char  GLboolean;
typedef khronos_int8_t  GLbyte;
typedef khronos_int64_t  GLint64;
typedef short  GLshort;
typedef void  GLvoid;
typedef khronos_uint64_t  GLuint64;
typedef unsigned int  GLbitfield;
typedef khronos_float_t  GLclampf;
typedef khronos_uint8_t  GLubyte;
typedef unsigned short  GLushort;
typedef int  GLint;
typedef struct __GLsync * GLsync;
typedef khronos_int32_t  GLfixed;
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RGB5_A1 0x8057
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_RGBA4 0x8056
#define GL_RENDERBUFFER 0x8D41
#define GL_FRAMEBUFFER 0x8D40
#define GL_HIGH_INT 0x8DF5
#define GL_MEDIUM_INT 0x8DF4
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_LOW_FLOAT 0x8DF0
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_COMPILE_STATUS 0x8B81
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_HIGH_FLOAT 0x8DF2
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_2D 0x8B5E
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_FLOAT_MAT4 0x8B5C
#define GL_BOOL 0x8B56
#define GL_INT_VEC4 0x8B55
#define GL_FLOAT_VEC4 0x8B52
#define GL_FLOAT_VEC3 0x8B51
#define GL_MIRRORED_REPEAT 0x8370
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_REPEAT 0x2901
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE21 0x84D5
#define GL_NONE 0
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE17 0x84D1
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_TEXTURE15 0x84CF
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE9 0x84C9
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_TEXTURE7 0x84C7
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE1 0x84C1
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_BLEND_COLOR 0x8005
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_BOOL_VEC4 0x8B59
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_LOW_INT 0x8DF3
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_LINEAR 0x2601
#define GL_EXTENSIONS 0x1F03
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_RENDERER 0x1F01
#define GL_CULL_FACE_MODE 0x0B45
#define GL_REPLACE 0x1E01
#define GL_VALIDATE_STATUS 0x8B83
#define GL_KEEP 0x1E00
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_ALWAYS 0x0207
#define GL_DECR 0x1E03
#define GL_GEQUAL 0x0206
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_GREATER 0x0204
#define GL_EQUAL 0x0202
#define GL_SRC_ALPHA 0x0302
#define GL_LESS 0x0201
#define GL_NEVER 0x0200
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_INVERT 0x150A
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_LINK_STATUS 0x8B82
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_BLEND 0x0BE2
#define GL_DELETE_STATUS 0x8B80
#define GL_SHADER_TYPE 0x8B4F
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE2 0x84C2
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_DEPTH_TEST 0x0B71
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_DEPTH_BITS 0x0D56
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_INT_VEC3 0x8B54
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_INCR 0x1E02
#define GL_RGBA 0x1908
#define GL_INCR_WRAP 0x8507
#define GL_ALPHA 0x1906
#define GL_RGB565 0x8D62
#define GL_FIXED 0x140C
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_DEPTH_FUNC 0x0B74
#define GL_UNSIGNED_INT 0x1405
#define GL_INT 0x1404
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_TEXTURE 0x1702
#define GL_UNSIGNED_SHORT 0x1403
#define GL_SHORT 0x1402
#define GL_INT_VEC2 0x8B53
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_DONT_CARE 0x1100
#define GL_RED_BITS 0x0D52
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_GREEN_BITS 0x0D53
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_INVALID_ENUM 0x0500
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_NO_ERROR 0
#define GL_SCISSOR_BOX 0x0C10
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_STENCIL_INDEX8 0x8D48
#define GL_ALPHA_BITS 0x0D55
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_LUMINANCE 0x1909
#define GL_SCISSOR_TEST 0x0C11
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_LINES 0x0001
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_LINE_WIDTH 0x0B21
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_CCW 0x0901
#define GL_TEXTURE13 0x84CD
#define GL_CW 0x0900
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_OUT_OF_MEMORY 0x0505
#define GL_DEPTH_COMPONENT 0x1902
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_FLOAT_MAT2 0x8B5A
#define GL_INVALID_OPERATION 0x0502
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_NICEST 0x1102
#define GL_TEXTURE16 0x84D0
#define GL_STENCIL_TEST 0x0B90
#define GL_TEXTURE_2D 0x0DE1
#define GL_STENCIL_BITS 0x0D57
#define GL_DITHER 0x0BD0
#define GL_FRONT_AND_BACK 0x0408
#define GL_FRONT 0x0404
#define GL_LINE_LOOP 0x0002
#define GL_NOTEQUAL 0x0205
#define GL_FALSE 0
#define GL_DST_COLOR 0x0306
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_BUFFER_SIZE 0x8764
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STREAM_DRAW 0x88E0
#define GL_STATIC_DRAW 0x88E4
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_FLOAT 0x1406
#define GL_FASTEST 0x1101
#define GL_TEXTURE29 0x84DD
#define GL_DEPTH_RANGE 0x0B70
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_DST_ALPHA 0x0304
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_COLOR 0x8001
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_BLUE_BITS 0x0D54
#define GL_TRUE 1
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_BYTE 0x1400
#define GL_ONE 1
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_TRIANGLE_STRIP 0x0005
#define GL_LEQUAL 0x0203
#define GL_FUNC_SUBTRACT 0x800A
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_CULL_FACE 0x0B44
#define GL_VERSION 0x1F02
#define GL_TRIANGLES 0x0004
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_VIEWPORT 0x0BA2
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_FLOAT_VEC2 0x8B50
#define GL_VERTEX_SHADER 0x8B31
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_BLEND_EQUATION 0x8009
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_FUNC_ADD 0x8006
#define GL_ARRAY_BUFFER 0x8892
#define GL_STENCIL_FUNC 0x0B92
#define GL_VENDOR 0x1F00
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_TEXTURE6 0x84C6
#define GL_POINTS 0x0000
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_FRONT_FACE 0x0B46
#define GL_BOOL_VEC2 0x8B57
#define GL_STENCIL_FAIL 0x0B94
#define GL_FLOAT_MAT3 0x8B5B
#define GL_TEXTURE5 0x84C5
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_ZERO 0
#define GL_UNSIGNED_BYTE 0x1401
#define GL_BACK 0x0405
#define GL_TEXTURE26 0x84DA
#define GL_BLEND_DST_RGB 0x80C8
#define GL_LINE_STRIP 0x0003
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TRIANGLE_FAN 0x0006
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_RGB 0x1907
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_DECR_WRAP 0x8508
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLES 0x80A9
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_BOOL_VEC3 0x8B58
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_NEAREST 0x2600
#define GL_SHADER_COMPILER 0x8DFA
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_BUFFER_USAGE 0x8765
#define GL_INVALID_VALUE 0x0501

typedef void  (GL_APIENTRY *PFN_glVertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
extern PFN_glVertexAttribPointer _glptr_glVertexAttribPointer;
#define glVertexAttribPointer _glptr_glVertexAttribPointer

typedef void  (GL_APIENTRY *PFN_glVertexAttrib3fv)(GLuint index, const GLfloat * v);
extern PFN_glVertexAttrib3fv _glptr_glVertexAttrib3fv;
#define glVertexAttrib3fv _glptr_glVertexAttrib3fv

typedef void  (GL_APIENTRY *PFN_glVertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
extern PFN_glVertexAttrib3f _glptr_glVertexAttrib3f;
#define glVertexAttrib3f _glptr_glVertexAttrib3f

typedef void  (GL_APIENTRY *PFN_glVertexAttrib2fv)(GLuint index, const GLfloat * v);
extern PFN_glVertexAttrib2fv _glptr_glVertexAttrib2fv;
#define glVertexAttrib2fv _glptr_glVertexAttrib2fv

typedef void  (GL_APIENTRY *PFN_glVertexAttrib1fv)(GLuint index, const GLfloat * v);
extern PFN_glVertexAttrib1fv _glptr_glVertexAttrib1fv;
#define glVertexAttrib1fv _glptr_glVertexAttrib1fv

typedef void  (GL_APIENTRY *PFN_glValidateProgram)(GLuint program);
extern PFN_glValidateProgram _glptr_glValidateProgram;
#define glValidateProgram _glptr_glValidateProgram

typedef void  (GL_APIENTRY *PFN_glUseProgram)(GLuint program);
extern PFN_glUseProgram _glptr_glUseProgram;
#define glUseProgram _glptr_glUseProgram

typedef void  (GL_APIENTRY *PFN_glUniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFN_glUniformMatrix4fv _glptr_glUniformMatrix4fv;
#define glUniformMatrix4fv _glptr_glUniformMatrix4fv

typedef void  (GL_APIENTRY *PFN_glUniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFN_glUniformMatrix3fv _glptr_glUniformMatrix3fv;
#define glUniformMatrix3fv _glptr_glUniformMatrix3fv

typedef void  (GL_APIENTRY *PFN_glUniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern PFN_glUniformMatrix2fv _glptr_glUniformMatrix2fv;
#define glUniformMatrix2fv _glptr_glUniformMatrix2fv

typedef void  (GL_APIENTRY *PFN_glUniform4fv)(GLint location, GLsizei count, const GLfloat * value);
extern PFN_glUniform4fv _glptr_glUniform4fv;
#define glUniform4fv _glptr_glUniform4fv

typedef void  (GL_APIENTRY *PFN_glUniform3iv)(GLint location, GLsizei count, const GLint * value);
extern PFN_glUniform3iv _glptr_glUniform3iv;
#define glUniform3iv _glptr_glUniform3iv

typedef void  (GL_APIENTRY *PFN_glUniform3fv)(GLint location, GLsizei count, const GLfloat * value);
extern PFN_glUniform3fv _glptr_glUniform3fv;
#define glUniform3fv _glptr_glUniform3fv

typedef void  (GL_APIENTRY *PFN_glUniform2fv)(GLint location, GLsizei count, const GLfloat * value);
extern PFN_glUniform2fv _glptr_glUniform2fv;
#define glUniform2fv _glptr_glUniform2fv

typedef void  (GL_APIENTRY *PFN_glUniform1iv)(GLint location, GLsizei count, const GLint * value);
extern PFN_glUniform1iv _glptr_glUniform1iv;
#define glUniform1iv _glptr_glUniform1iv

typedef void  (GL_APIENTRY *PFN_glUniform1i)(GLint location, GLint v0);
extern PFN_glUniform1i _glptr_glUniform1i;
#define glUniform1i _glptr_glUniform1i

typedef void  (GL_APIENTRY *PFN_glUniform1fv)(GLint location, GLsizei count, const GLfloat * value);
extern PFN_glUniform1fv _glptr_glUniform1fv;
#define glUniform1fv _glptr_glUniform1fv

typedef void  (GL_APIENTRY *PFN_glTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
extern PFN_glTexSubImage2D _glptr_glTexSubImage2D;
#define glTexSubImage2D _glptr_glTexSubImage2D

typedef void  (GL_APIENTRY *PFN_glTexParameteri)(GLenum target, GLenum pname, GLint param);
extern PFN_glTexParameteri _glptr_glTexParameteri;
#define glTexParameteri _glptr_glTexParameteri

typedef void  (GL_APIENTRY *PFN_glUniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern PFN_glUniform3f _glptr_glUniform3f;
#define glUniform3f _glptr_glUniform3f

typedef void  (GL_APIENTRY *PFN_glTexParameterf)(GLenum target, GLenum pname, GLfloat param);
extern PFN_glTexParameterf _glptr_glTexParameterf;
#define glTexParameterf _glptr_glTexParameterf

typedef void  (GL_APIENTRY *PFN_glStencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
extern PFN_glStencilOpSeparate _glptr_glStencilOpSeparate;
#define glStencilOpSeparate _glptr_glStencilOpSeparate

typedef void  (GL_APIENTRY *PFN_glStencilMask)(GLuint mask);
extern PFN_glStencilMask _glptr_glStencilMask;
#define glStencilMask _glptr_glStencilMask

typedef void  (GL_APIENTRY *PFN_glStencilFunc)(GLenum func, GLint ref, GLuint mask);
extern PFN_glStencilFunc _glptr_glStencilFunc;
#define glStencilFunc _glptr_glStencilFunc

typedef void  (GL_APIENTRY *PFN_glShaderSource)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
extern PFN_glShaderSource _glptr_glShaderSource;
#define glShaderSource _glptr_glShaderSource

typedef void  (GL_APIENTRY *PFN_glUniform1f)(GLint location, GLfloat v0);
extern PFN_glUniform1f _glptr_glUniform1f;
#define glUniform1f _glptr_glUniform1f

typedef void  (GL_APIENTRY *PFN_glShaderBinary)(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length);
extern PFN_glShaderBinary _glptr_glShaderBinary;
#define glShaderBinary _glptr_glShaderBinary

typedef void  (GL_APIENTRY *PFN_glHint)(GLenum target, GLenum mode);
extern PFN_glHint _glptr_glHint;
#define glHint _glptr_glHint

typedef void  (GL_APIENTRY *PFN_glScissor)(GLint x, GLint y, GLsizei width, GLsizei height);
extern PFN_glScissor _glptr_glScissor;
#define glScissor _glptr_glScissor

typedef void  (GL_APIENTRY *PFN_glGetBufferParameteriv)(GLenum target, GLenum pname, GLint * params);
extern PFN_glGetBufferParameteriv _glptr_glGetBufferParameteriv;
#define glGetBufferParameteriv _glptr_glGetBufferParameteriv

typedef void  (GL_APIENTRY *PFN_glRenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
extern PFN_glRenderbufferStorage _glptr_glRenderbufferStorage;
#define glRenderbufferStorage _glptr_glRenderbufferStorage

typedef void  (GL_APIENTRY *PFN_glReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
extern PFN_glReadPixels _glptr_glReadPixels;
#define glReadPixels _glptr_glReadPixels

typedef void  (GL_APIENTRY *PFN_glPixelStorei)(GLenum pname, GLint param);
extern PFN_glPixelStorei _glptr_glPixelStorei;
#define glPixelStorei _glptr_glPixelStorei

typedef void  (GL_APIENTRY *PFN_glDeleteTextures)(GLsizei n, const GLuint * textures);
extern PFN_glDeleteTextures _glptr_glDeleteTextures;
#define glDeleteTextures _glptr_glDeleteTextures

typedef GLboolean (GL_APIENTRY *PFN_glIsBuffer)(GLuint buffer);
extern PFN_glIsBuffer _glptr_glIsBuffer;
#define glIsBuffer _glptr_glIsBuffer

typedef void  (GL_APIENTRY *PFN_glLineWidth)(GLfloat width);
extern PFN_glLineWidth _glptr_glLineWidth;
#define glLineWidth _glptr_glLineWidth

typedef GLboolean (GL_APIENTRY *PFN_glIsEnabled)(GLenum cap);
extern PFN_glIsEnabled _glptr_glIsEnabled;
#define glIsEnabled _glptr_glIsEnabled

typedef void  (GL_APIENTRY *PFN_glGetVertexAttribiv)(GLuint index, GLenum pname, GLint * params);
extern PFN_glGetVertexAttribiv _glptr_glGetVertexAttribiv;
#define glGetVertexAttribiv _glptr_glGetVertexAttribiv

typedef GLint (GL_APIENTRY *PFN_glGetUniformLocation)(GLuint program, const GLchar * name);
extern PFN_glGetUniformLocation _glptr_glGetUniformLocation;
#define glGetUniformLocation _glptr_glGetUniformLocation

typedef void  (GL_APIENTRY *PFN_glGetTexParameteriv)(GLenum target, GLenum pname, GLint * params);
extern PFN_glGetTexParameteriv _glptr_glGetTexParameteriv;
#define glGetTexParameteriv _glptr_glGetTexParameteriv

typedef void  (GL_APIENTRY *PFN_glGetVertexAttribPointerv)(GLuint index, GLenum pname, void ** pointer);
extern PFN_glGetVertexAttribPointerv _glptr_glGetVertexAttribPointerv;
#define glGetVertexAttribPointerv _glptr_glGetVertexAttribPointerv

typedef void  (GL_APIENTRY *PFN_glViewport)(GLint x, GLint y, GLsizei width, GLsizei height);
extern PFN_glViewport _glptr_glViewport;
#define glViewport _glptr_glViewport

typedef void  (GL_APIENTRY *PFN_glGetTexParameterfv)(GLenum target, GLenum pname, GLfloat * params);
extern PFN_glGetTexParameterfv _glptr_glGetTexParameterfv;
#define glGetTexParameterfv _glptr_glGetTexParameterfv

typedef GLboolean (GL_APIENTRY *PFN_glIsTexture)(GLuint texture);
extern PFN_glIsTexture _glptr_glIsTexture;
#define glIsTexture _glptr_glIsTexture

typedef const GLubyte * (GL_APIENTRY *PFN_glGetString)(GLenum name);
extern PFN_glGetString _glptr_glGetString;
#define glGetString _glptr_glGetString

typedef void  (GL_APIENTRY *PFN_glCopyTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
extern PFN_glCopyTexImage2D _glptr_glCopyTexImage2D;
#define glCopyTexImage2D _glptr_glCopyTexImage2D

typedef GLboolean (GL_APIENTRY *PFN_glIsProgram)(GLuint program);
extern PFN_glIsProgram _glptr_glIsProgram;
#define glIsProgram _glptr_glIsProgram

typedef void  (GL_APIENTRY *PFN_glVertexAttrib4fv)(GLuint index, const GLfloat * v);
extern PFN_glVertexAttrib4fv _glptr_glVertexAttrib4fv;
#define glVertexAttrib4fv _glptr_glVertexAttrib4fv

typedef void  (GL_APIENTRY *PFN_glGetUniformiv)(GLuint program, GLint location, GLint * params);
extern PFN_glGetUniformiv _glptr_glGetUniformiv;
#define glGetUniformiv _glptr_glGetUniformiv

typedef void  (GL_APIENTRY *PFN_glUniform3i)(GLint location, GLint v0, GLint v1, GLint v2);
extern PFN_glUniform3i _glptr_glUniform3i;
#define glUniform3i _glptr_glUniform3i

typedef void  (GL_APIENTRY *PFN_glGetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
extern PFN_glGetShaderPrecisionFormat _glptr_glGetShaderPrecisionFormat;
#define glGetShaderPrecisionFormat _glptr_glGetShaderPrecisionFormat

typedef void  (GL_APIENTRY *PFN_glGetShaderiv)(GLuint shader, GLenum pname, GLint * params);
extern PFN_glGetShaderiv _glptr_glGetShaderiv;
#define glGetShaderiv _glptr_glGetShaderiv

typedef void  (GL_APIENTRY *PFN_glGetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint * params);
extern PFN_glGetRenderbufferParameteriv _glptr_glGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv _glptr_glGetRenderbufferParameteriv

typedef void  (GL_APIENTRY *PFN_glGetProgramiv)(GLuint program, GLenum pname, GLint * params);
extern PFN_glGetProgramiv _glptr_glGetProgramiv;
#define glGetProgramiv _glptr_glGetProgramiv

typedef void  (GL_APIENTRY *PFN_glGetIntegerv)(GLenum pname, GLint * data);
extern PFN_glGetIntegerv _glptr_glGetIntegerv;
#define glGetIntegerv _glptr_glGetIntegerv

typedef void  (GL_APIENTRY *PFN_glGetFloatv)(GLenum pname, GLfloat * data);
extern PFN_glGetFloatv _glptr_glGetFloatv;
#define glGetFloatv _glptr_glGetFloatv

typedef void  (GL_APIENTRY *PFN_glUniform2i)(GLint location, GLint v0, GLint v1);
extern PFN_glUniform2i _glptr_glUniform2i;
#define glUniform2i _glptr_glUniform2i

typedef GLenum (GL_APIENTRY *PFN_glGetError)();
extern PFN_glGetError _glptr_glGetError;
#define glGetError _glptr_glGetError

typedef void  (GL_APIENTRY *PFN_glGetBooleanv)(GLenum pname, GLboolean * data);
extern PFN_glGetBooleanv _glptr_glGetBooleanv;
#define glGetBooleanv _glptr_glGetBooleanv

typedef void  (GL_APIENTRY *PFN_glVertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern PFN_glVertexAttrib4f _glptr_glVertexAttrib4f;
#define glVertexAttrib4f _glptr_glVertexAttrib4f

typedef GLint (GL_APIENTRY *PFN_glGetAttribLocation)(GLuint program, const GLchar * name);
extern PFN_glGetAttribLocation _glptr_glGetAttribLocation;
#define glGetAttribLocation _glptr_glGetAttribLocation

typedef void  (GL_APIENTRY *PFN_glGetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
extern PFN_glGetActiveUniform _glptr_glGetActiveUniform;
#define glGetActiveUniform _glptr_glGetActiveUniform

typedef void  (GL_APIENTRY *PFN_glTexParameteriv)(GLenum target, GLenum pname, const GLint * params);
extern PFN_glTexParameteriv _glptr_glTexParameteriv;
#define glTexParameteriv _glptr_glTexParameteriv

typedef void  (GL_APIENTRY *PFN_glGetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
extern PFN_glGetActiveAttrib _glptr_glGetActiveAttrib;
#define glGetActiveAttrib _glptr_glGetActiveAttrib

typedef void  (GL_APIENTRY *PFN_glStencilMaskSeparate)(GLenum face, GLuint mask);
extern PFN_glStencilMaskSeparate _glptr_glStencilMaskSeparate;
#define glStencilMaskSeparate _glptr_glStencilMaskSeparate

typedef void  (GL_APIENTRY *PFN_glGenRenderbuffers)(GLsizei n, GLuint * renderbuffers);
extern PFN_glGenRenderbuffers _glptr_glGenRenderbuffers;
#define glGenRenderbuffers _glptr_glGenRenderbuffers

typedef void  (GL_APIENTRY *PFN_glCompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
extern PFN_glCompressedTexSubImage2D _glptr_glCompressedTexSubImage2D;
#define glCompressedTexSubImage2D _glptr_glCompressedTexSubImage2D

typedef void  (GL_APIENTRY *PFN_glGetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
extern PFN_glGetProgramInfoLog _glptr_glGetProgramInfoLog;
#define glGetProgramInfoLog _glptr_glGetProgramInfoLog

typedef void  (GL_APIENTRY *PFN_glDeleteShader)(GLuint shader);
extern PFN_glDeleteShader _glptr_glDeleteShader;
#define glDeleteShader _glptr_glDeleteShader

typedef void  (GL_APIENTRY *PFN_glGenBuffers)(GLsizei n, GLuint * buffers);
extern PFN_glGenBuffers _glptr_glGenBuffers;
#define glGenBuffers _glptr_glGenBuffers

typedef void  (GL_APIENTRY *PFN_glSampleCoverage)(GLfloat value, GLboolean invert);
extern PFN_glSampleCoverage _glptr_glSampleCoverage;
#define glSampleCoverage _glptr_glSampleCoverage

typedef void  (GL_APIENTRY *PFN_glGenTextures)(GLsizei n, GLuint * textures);
extern PFN_glGenTextures _glptr_glGenTextures;
#define glGenTextures _glptr_glGenTextures

typedef void  (GL_APIENTRY *PFN_glGetVertexAttribfv)(GLuint index, GLenum pname, GLfloat * params);
extern PFN_glGetVertexAttribfv _glptr_glGetVertexAttribfv;
#define glGetVertexAttribfv _glptr_glGetVertexAttribfv

typedef void  (GL_APIENTRY *PFN_glUniform4iv)(GLint location, GLsizei count, const GLint * value);
extern PFN_glUniform4iv _glptr_glUniform4iv;
#define glUniform4iv _glptr_glUniform4iv

typedef void  (GL_APIENTRY *PFN_glFrontFace)(GLenum mode);
extern PFN_glFrontFace _glptr_glFrontFace;
#define glFrontFace _glptr_glFrontFace

typedef void  (GL_APIENTRY *PFN_glUniform2iv)(GLint location, GLsizei count, const GLint * value);
extern PFN_glUniform2iv _glptr_glUniform2iv;
#define glUniform2iv _glptr_glUniform2iv

typedef GLboolean (GL_APIENTRY *PFN_glIsShader)(GLuint shader);
extern PFN_glIsShader _glptr_glIsShader;
#define glIsShader _glptr_glIsShader

typedef void  (GL_APIENTRY *PFN_glBindFramebuffer)(GLenum target, GLuint framebuffer);
extern PFN_glBindFramebuffer _glptr_glBindFramebuffer;
#define glBindFramebuffer _glptr_glBindFramebuffer

typedef void  (GL_APIENTRY *PFN_glFramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern PFN_glFramebufferTexture2D _glptr_glFramebufferTexture2D;
#define glFramebufferTexture2D _glptr_glFramebufferTexture2D

typedef void  (GL_APIENTRY *PFN_glUniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern PFN_glUniform4i _glptr_glUniform4i;
#define glUniform4i _glptr_glUniform4i

typedef void  (GL_APIENTRY *PFN_glClearStencil)(GLint s);
extern PFN_glClearStencil _glptr_glClearStencil;
#define glClearStencil _glptr_glClearStencil

typedef void  (GL_APIENTRY *PFN_glDeleteRenderbuffers)(GLsizei n, const GLuint * renderbuffers);
extern PFN_glDeleteRenderbuffers _glptr_glDeleteRenderbuffers;
#define glDeleteRenderbuffers _glptr_glDeleteRenderbuffers

typedef void  (GL_APIENTRY *PFN_glFinish)();
extern PFN_glFinish _glptr_glFinish;
#define glFinish _glptr_glFinish

typedef void  (GL_APIENTRY *PFN_glBlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
extern PFN_glBlendFuncSeparate _glptr_glBlendFuncSeparate;
#define glBlendFuncSeparate _glptr_glBlendFuncSeparate

typedef void  (GL_APIENTRY *PFN_glBindAttribLocation)(GLuint program, GLuint index, const GLchar * name);
extern PFN_glBindAttribLocation _glptr_glBindAttribLocation;
#define glBindAttribLocation _glptr_glBindAttribLocation

typedef void  (GL_APIENTRY *PFN_glClear)(GLbitfield mask);
extern PFN_glClear _glptr_glClear;
#define glClear _glptr_glClear

typedef void  (GL_APIENTRY *PFN_glEnableVertexAttribArray)(GLuint index);
extern PFN_glEnableVertexAttribArray _glptr_glEnableVertexAttribArray;
#define glEnableVertexAttribArray _glptr_glEnableVertexAttribArray

typedef void  (GL_APIENTRY *PFN_glStencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask);
extern PFN_glStencilFuncSeparate _glptr_glStencilFuncSeparate;
#define glStencilFuncSeparate _glptr_glStencilFuncSeparate

typedef void  (GL_APIENTRY *PFN_glPolygonOffset)(GLfloat factor, GLfloat units);
extern PFN_glPolygonOffset _glptr_glPolygonOffset;
#define glPolygonOffset _glptr_glPolygonOffset

typedef void  (GL_APIENTRY *PFN_glDisable)(GLenum cap);
extern PFN_glDisable _glptr_glDisable;
#define glDisable _glptr_glDisable

typedef void  (GL_APIENTRY *PFN_glDetachShader)(GLuint program, GLuint shader);
extern PFN_glDetachShader _glptr_glDetachShader;
#define glDetachShader _glptr_glDetachShader

typedef void  (GL_APIENTRY *PFN_glReleaseShaderCompiler)();
extern PFN_glReleaseShaderCompiler _glptr_glReleaseShaderCompiler;
#define glReleaseShaderCompiler _glptr_glReleaseShaderCompiler

typedef void  (GL_APIENTRY *PFN_glCompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
extern PFN_glCompressedTexImage2D _glptr_glCompressedTexImage2D;
#define glCompressedTexImage2D _glptr_glCompressedTexImage2D

typedef void  (GL_APIENTRY *PFN_glBindRenderbuffer)(GLenum target, GLuint renderbuffer);
extern PFN_glBindRenderbuffer _glptr_glBindRenderbuffer;
#define glBindRenderbuffer _glptr_glBindRenderbuffer

typedef void  (GL_APIENTRY *PFN_glDepthMask)(GLboolean flag);
extern PFN_glDepthMask _glptr_glDepthMask;
#define glDepthMask _glptr_glDepthMask

typedef GLboolean (GL_APIENTRY *PFN_glIsFramebuffer)(GLuint framebuffer);
extern PFN_glIsFramebuffer _glptr_glIsFramebuffer;
#define glIsFramebuffer _glptr_glIsFramebuffer

typedef void  (GL_APIENTRY *PFN_glGetUniformfv)(GLuint program, GLint location, GLfloat * params);
extern PFN_glGetUniformfv _glptr_glGetUniformfv;
#define glGetUniformfv _glptr_glGetUniformfv

typedef void  (GL_APIENTRY *PFN_glUniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern PFN_glUniform4f _glptr_glUniform4f;
#define glUniform4f _glptr_glUniform4f

typedef void  (GL_APIENTRY *PFN_glAttachShader)(GLuint program, GLuint shader);
extern PFN_glAttachShader _glptr_glAttachShader;
#define glAttachShader _glptr_glAttachShader

typedef void  (GL_APIENTRY *PFN_glFramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern PFN_glFramebufferRenderbuffer _glptr_glFramebufferRenderbuffer;
#define glFramebufferRenderbuffer _glptr_glFramebufferRenderbuffer

typedef void  (GL_APIENTRY *PFN_glStencilOp)(GLenum fail, GLenum zfail, GLenum zpass);
extern PFN_glStencilOp _glptr_glStencilOp;
#define glStencilOp _glptr_glStencilOp

typedef void  (GL_APIENTRY *PFN_glDisableVertexAttribArray)(GLuint index);
extern PFN_glDisableVertexAttribArray _glptr_glDisableVertexAttribArray;
#define glDisableVertexAttribArray _glptr_glDisableVertexAttribArray

typedef GLboolean (GL_APIENTRY *PFN_glIsRenderbuffer)(GLuint renderbuffer);
extern PFN_glIsRenderbuffer _glptr_glIsRenderbuffer;
#define glIsRenderbuffer _glptr_glIsRenderbuffer

typedef void  (GL_APIENTRY *PFN_glDeleteProgram)(GLuint program);
extern PFN_glDeleteProgram _glptr_glDeleteProgram;
#define glDeleteProgram _glptr_glDeleteProgram

typedef void  (GL_APIENTRY *PFN_glDrawArrays)(GLenum mode, GLint first, GLsizei count);
extern PFN_glDrawArrays _glptr_glDrawArrays;
#define glDrawArrays _glptr_glDrawArrays

typedef void  (GL_APIENTRY *PFN_glBlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha);
extern PFN_glBlendEquationSeparate _glptr_glBlendEquationSeparate;
#define glBlendEquationSeparate _glptr_glBlendEquationSeparate

typedef void  (GL_APIENTRY *PFN_glCompileShader)(GLuint shader);
extern PFN_glCompileShader _glptr_glCompileShader;
#define glCompileShader _glptr_glCompileShader

typedef void  (GL_APIENTRY *PFN_glVertexAttrib1f)(GLuint index, GLfloat x);
extern PFN_glVertexAttrib1f _glptr_glVertexAttrib1f;
#define glVertexAttrib1f _glptr_glVertexAttrib1f

typedef void  (GL_APIENTRY *PFN_glDeleteFramebuffers)(GLsizei n, const GLuint * framebuffers);
extern PFN_glDeleteFramebuffers _glptr_glDeleteFramebuffers;
#define glDeleteFramebuffers _glptr_glDeleteFramebuffers

typedef void  (GL_APIENTRY *PFN_glDeleteBuffers)(GLsizei n, const GLuint * buffers);
extern PFN_glDeleteBuffers _glptr_glDeleteBuffers;
#define glDeleteBuffers _glptr_glDeleteBuffers

typedef void  (GL_APIENTRY *PFN_glTexParameterfv)(GLenum target, GLenum pname, const GLfloat * params);
extern PFN_glTexParameterfv _glptr_glTexParameterfv;
#define glTexParameterfv _glptr_glTexParameterfv

typedef void  (GL_APIENTRY *PFN_glLinkProgram)(GLuint program);
extern PFN_glLinkProgram _glptr_glLinkProgram;
#define glLinkProgram _glptr_glLinkProgram

typedef void  (GL_APIENTRY *PFN_glGenerateMipmap)(GLenum target);
extern PFN_glGenerateMipmap _glptr_glGenerateMipmap;
#define glGenerateMipmap _glptr_glGenerateMipmap

typedef void  (GL_APIENTRY *PFN_glCullFace)(GLenum mode);
extern PFN_glCullFace _glptr_glCullFace;
#define glCullFace _glptr_glCullFace

typedef void  (GL_APIENTRY *PFN_glVertexAttrib2f)(GLuint index, GLfloat x, GLfloat y);
extern PFN_glVertexAttrib2f _glptr_glVertexAttrib2f;
#define glVertexAttrib2f _glptr_glVertexAttrib2f

typedef void  (GL_APIENTRY *PFN_glTexImage2D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
extern PFN_glTexImage2D _glptr_glTexImage2D;
#define glTexImage2D _glptr_glTexImage2D

typedef void  (GL_APIENTRY *PFN_glDrawElements)(GLenum mode, GLsizei count, GLenum type, const void * indices);
extern PFN_glDrawElements _glptr_glDrawElements;
#define glDrawElements _glptr_glDrawElements

typedef void  (GL_APIENTRY *PFN_glGenFramebuffers)(GLsizei n, GLuint * framebuffers);
extern PFN_glGenFramebuffers _glptr_glGenFramebuffers;
#define glGenFramebuffers _glptr_glGenFramebuffers

typedef GLuint (GL_APIENTRY *PFN_glCreateShader)(GLenum type);
extern PFN_glCreateShader _glptr_glCreateShader;
#define glCreateShader _glptr_glCreateShader

typedef void  (GL_APIENTRY *PFN_glGetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
extern PFN_glGetFramebufferAttachmentParameteriv _glptr_glGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv _glptr_glGetFramebufferAttachmentParameteriv

typedef void  (GL_APIENTRY *PFN_glClearColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFN_glClearColor _glptr_glClearColor;
#define glClearColor _glptr_glClearColor

typedef GLuint (GL_APIENTRY *PFN_glCreateProgram)();
extern PFN_glCreateProgram _glptr_glCreateProgram;
#define glCreateProgram _glptr_glCreateProgram

typedef void  (GL_APIENTRY *PFN_glClearDepthf)(GLfloat d);
extern PFN_glClearDepthf _glptr_glClearDepthf;
#define glClearDepthf _glptr_glClearDepthf

typedef void  (GL_APIENTRY *PFN_glBlendFunc)(GLenum sfactor, GLenum dfactor);
extern PFN_glBlendFunc _glptr_glBlendFunc;
#define glBlendFunc _glptr_glBlendFunc

typedef void  (GL_APIENTRY *PFN_glBindBuffer)(GLenum target, GLuint buffer);
extern PFN_glBindBuffer _glptr_glBindBuffer;
#define glBindBuffer _glptr_glBindBuffer

typedef void  (GL_APIENTRY *PFN_glGetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
extern PFN_glGetShaderInfoLog _glptr_glGetShaderInfoLog;
#define glGetShaderInfoLog _glptr_glGetShaderInfoLog

typedef GLenum (GL_APIENTRY *PFN_glCheckFramebufferStatus)(GLenum target);
extern PFN_glCheckFramebufferStatus _glptr_glCheckFramebufferStatus;
#define glCheckFramebufferStatus _glptr_glCheckFramebufferStatus

typedef void  (GL_APIENTRY *PFN_glBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
extern PFN_glBufferSubData _glptr_glBufferSubData;
#define glBufferSubData _glptr_glBufferSubData

typedef void  (GL_APIENTRY *PFN_glActiveTexture)(GLenum texture);
extern PFN_glActiveTexture _glptr_glActiveTexture;
#define glActiveTexture _glptr_glActiveTexture

typedef void  (GL_APIENTRY *PFN_glColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
extern PFN_glColorMask _glptr_glColorMask;
#define glColorMask _glptr_glColorMask

typedef void  (GL_APIENTRY *PFN_glBufferData)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
extern PFN_glBufferData _glptr_glBufferData;
#define glBufferData _glptr_glBufferData

typedef void  (GL_APIENTRY *PFN_glDepthFunc)(GLenum func);
extern PFN_glDepthFunc _glptr_glDepthFunc;
#define glDepthFunc _glptr_glDepthFunc

typedef void  (GL_APIENTRY *PFN_glFlush)();
extern PFN_glFlush _glptr_glFlush;
#define glFlush _glptr_glFlush

typedef void  (GL_APIENTRY *PFN_glCopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFN_glCopyTexSubImage2D _glptr_glCopyTexSubImage2D;
#define glCopyTexSubImage2D _glptr_glCopyTexSubImage2D

typedef void  (GL_APIENTRY *PFN_glGetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
extern PFN_glGetAttachedShaders _glptr_glGetAttachedShaders;
#define glGetAttachedShaders _glptr_glGetAttachedShaders

typedef void  (GL_APIENTRY *PFN_glDepthRangef)(GLfloat n, GLfloat f);
extern PFN_glDepthRangef _glptr_glDepthRangef;
#define glDepthRangef _glptr_glDepthRangef

typedef void  (GL_APIENTRY *PFN_glBlendEquation)(GLenum mode);
extern PFN_glBlendEquation _glptr_glBlendEquation;
#define glBlendEquation _glptr_glBlendEquation

typedef void  (GL_APIENTRY *PFN_glGetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
extern PFN_glGetShaderSource _glptr_glGetShaderSource;
#define glGetShaderSource _glptr_glGetShaderSource

typedef void  (GL_APIENTRY *PFN_glEnable)(GLenum cap);
extern PFN_glEnable _glptr_glEnable;
#define glEnable _glptr_glEnable

typedef void  (GL_APIENTRY *PFN_glBlendColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFN_glBlendColor _glptr_glBlendColor;
#define glBlendColor _glptr_glBlendColor

typedef void  (GL_APIENTRY *PFN_glUniform2f)(GLint location, GLfloat v0, GLfloat v1);
extern PFN_glUniform2f _glptr_glUniform2f;
#define glUniform2f _glptr_glUniform2f

typedef void  (GL_APIENTRY *PFN_glBindTexture)(GLenum target, GLuint texture);
extern PFN_glBindTexture _glptr_glBindTexture;
#define glBindTexture _glptr_glBindTexture
#if defined(__cplusplus)
}
#endif
#endif
